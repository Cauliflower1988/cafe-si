<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:int-stream="http://www.springframework.org/schema/integration/stream"
	xmlns:int-xml="http://www.springframework.org/schema/integration/xml"
	xmlns:int-jms="http://www.springframework.org/schema/integration/jms"
	xmlns:amq="http://activemq.apache.org/schema/core"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/integration
		http://www.springframework.org/schema/integration/spring-integration.xsd
		http://www.springframework.org/schema/integration/stream
		http://www.springframework.org/schema/integration/stream/spring-integration-stream.xsd 
		http://www.springframework.org/schema/integration/xml
		http://www.springframework.org/schema/integration/xml/spring-integration-xml.xsd 
		http://www.springframework.org/schema/integration/jms 
		http://www.springframework.org/schema/integration/jms/spring-integration-jms.xsd 
		http://activemq.apache.org/schema/core 
		http://activemq.apache.org/schema/core/activemq-core-5.4.2.xsd
		http://www.springframework.org/schema/util 
		http://www.springframework.org/schema/util/spring-util.xsd">



	<int-jms:channel id="XMLOrders" queue-name="cafe.orders" />

	<int:chain input-channel="XMLOrders" output-channel="orders">

		<!-- Split the order into items creating a new message for each item node -->
		<int-xml:xpath-splitter>
			<int-xml:xpath-expression expression="/orders/Order"/>
		</int-xml:xpath-splitter>

		<!-- Create and Order object instance from each <Order> XML element -->
		<int-xml:unmarshalling-transformer unmarshaller="jaxb-marshaller"/>
	</int:chain>

	<int:channel id="orders">
		<int:interceptors>
			<int:wire-tap channel="logger"/>
		</int:interceptors>
	</int:channel>

	<int:logging-channel-adapter id="logger" level="INFO"/>

	<!-- each order has a collection of order items that is split apart to be processed -->
	<int:splitter input-channel="orders" expression="payload.items" output-channel="food-drink-router"/>

    <!-- separate routes for food items and drink items -->
    <int:channel id="food-drink-router" />
	<int:router input-channel="food-drink-router" ref="myRouter" />
	<!--
    <int:payload-type-router input-channel="food-drink-router">
        <int:mapping type="org.springframework.integration.samples.cafe.DrinkOrderItem" channel="drinks" />
        <int:mapping type="org.springframework.integration.samples.cafe.FoodOrderItem" channel="bites" />
    </int:payload-type-router>
    -->

	<!-- The router sends different drink orders on different paths -->
	<int:channel id="drinks"/>
	<int:router input-channel="drinks"  expression="payload.iced ? 'coldDrinks' : 'hotDrinks'"/>

	<!-- individual order items are processed by the barista -->
	<int:channel id="coldDrinks">
		<int:queue capacity="10"/>
	</int:channel>
	<int:service-activator input-channel="coldDrinks" ref="barista" method="prepareColdDrink" output-channel="preparedItems"/>

	<!-- individual order items are processed by the barista -->
	<int:channel id="hotDrinks">
		<int:queue capacity="10"/>
	</int:channel>
	<int:service-activator input-channel="hotDrinks" ref="barista" method="prepareHotDrink" output-channel="preparedItems"/>


    <int:channel id="bites">
        <int:queue capacity="10"/>
    </int:channel>
    <int:service-activator input-channel="bites" ref="chef" method="prepareSandwich" output-channel="preparedItems"/>


	<!-- order items are aggregated in a call to the waiter -->
	<int:channel id="preparedItems"/>
	<int:aggregator input-channel="preparedItems"  method="prepareDelivery" output-channel="deliveries">
		<beans:bean class="org.springframework.integration.samples.cafe.xml.Waiter"/>
	</int:aggregator>


	<int:channel id="deliveries">
		<int:interceptors>
			<int:wire-tap channel="logger"/>
		</int:interceptors>
	</int:channel>
	
	<int-xml:marshalling-transformer marshaller="jaxb-marshaller" result-transformer="marshallingTransformer" input-channel="deliveries" output-channel="XMLDeliveries" />
	
	<int:channel id="XMLDeliveries" />
	<int-jms:outbound-channel-adapter channel="XMLDeliveries" destination-name="cafe.deliveries"></int-jms:outbound-channel-adapter>
	


	<amq:broker brokerName="cafe-broker">
		<amq:transportConnectors>
			<amq:transportConnector name="openwire" uri="tcp://localhost:61616"/>
		</amq:transportConnectors>

		<amq:destinations>
			<amq:queue name="cafe.deliveries" physicalName="cafe.deliveries" />	
		</amq:destinations>
		<amq:plugins>
			<amq:statisticsBrokerPlugin/>
		</amq:plugins>
	</amq:broker>
	
	<!-- Set up the connection factory. You must name the bean "connectionFactory" for the JMS-backed
	channels to automatically find it. Otherwise, you must specify the connection when you declare the
	channel -->
	<beans:bean id="connectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
		<beans:property name="targetConnectionFactory">
			<beans:bean class="org.apache.activemq.ActiveMQConnectionFactory">
				<beans:property name="brokerURL" value="tcp://localhost:61616"/>
			</beans:bean>
		</beans:property>
		<beans:property name="sessionCacheSize" value="10"/>
		<beans:property name="cacheProducers" value="false"/>
	</beans:bean>

	<beans:bean id="jaxb-marshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
		<beans:property name="contextPath" value="org.springframework.integration.samples.cafe" />
	</beans:bean>
	
	<beans:bean id="marshallingTransformer" class="org.springframework.integration.xml.transformer.ResultToStringTransformer">
    	<beans:property name="outputProperties">
	    	<beans:props>
		    	<beans:prop key="indent">yes</beans:prop>
		    	<beans:prop key="{http://xml.apache.org/xslt}indent-amount">4</beans:prop>
    		</beans:props>
    	</beans:property>
	</beans:bean>

	<beans:bean id="barista" class="org.springframework.integration.samples.cafe.xml.Barista"/>

    <beans:bean id="chef" class="org.springframework.integration.samples.cafe.xml.Chef"/>

	<beans:bean id="myRouter" class="org.springframework.integration.samples.cafe.MyRouter">
		<beans:property name="drinks" ref="drinks" />
		<beans:property name="bites" ref="bites" />
	</beans:bean>

	<int:poller id="poller" default="true" fixed-delay="1000"/>

</beans:beans>
